! Program : utest_surface
! Purpose : Unit tests for surface_m and subtypes

#:include 'forum.inc'
#:include 'utest.inc'

program utest_surface

   ! Uses

   use forum_m

   use roche_surface_m
   use sphere_surface_m
   use point_m
   use vector_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Run the tests

   call test_sphere_surface()
   call test_roche_surface()

   ! Finish

contains

   subroutine test_sphere_surface()

      real(RD), parameter :: TOL = 1E-15_RD

      type(sphere_surface_t) :: surf

      print *, 'Checking sphere_surface functionality'

      surf = sphere_surface_t(1._RD)

      @:CHECK(ABS(surf%radius(0._RD, 0._RD) - 1._RD) < TOL, 'polar radius')
      @:CHECK(ABS(surf%radius(HALFPI, 0._RD) - 1._RD) < TOL, 'equatorial radius')

      @:CHECK(NORM2(surf%point(0._RD, HALFPI) - point_t(0._RD, 0._RD, 1._RD)) < tol, 'polar point')
      @:CHECK(NORM2(surf%point(HALFPI, HALFPI) - point_t(0._RD, 1._RD, 0._RD)) < tol, 'equatorial point')

      ! Finish

      return

   end subroutine test_sphere_surface

   !****

   subroutine test_roche_surface()

      real(RD), parameter :: TOL = 1E-15_RD

      type(roche_surface_t) :: surf

      print *, 'Checking roche_surface functionality'

      surf = roche_surface_t(1._RD, 0._RD)

      @:CHECK(ABS(surf%radius(0._RD, 0._RD) - 1._RD) < TOL, 'non-rotating polar radius')
      @:CHECK(ABS(surf%radius(HALFPI, 0._RD) - 1._RD) < TOL, 'non-rotating equatorial radius')

      @:CHECK(NORM2(surf%point(0._RD, HALFPI) - point_t(0._RD, 0._RD, 1._RD)) < tol, 'non-rotating polar point')
      @:CHECK(NORM2(surf%point(HALFPI, HALFPI) - point_t(0._RD, 1._RD, 0._RD)) < tol, 'non-rotating equatorial point')

      !

      surf = roche_surface_t(1._RD, 1._RD)

      @:CHECK(ABS(surf%radius(0._RD, 0._RD) - 1._RD) < TOL, 'critical-rotating polar radius')
      @:CHECK(ABS(surf%radius(HALFPI, 0._RD) - 1.5_RD) < TOL, 'critical-rotating equatorial radius')

      @:CHECK(NORM2(surf%point(0._RD, HALFPI) - point_t(0._RD, 0._RD, 1._RD)) < tol, 'critical-rotating polar')
      @:CHECK(NORM2(surf%point(HALFPI, HALFPI) - point_t(0._RD, 1.5_RD, 0._RD)) < tol, 'critical-rotating equatorial point')

      ! Finish

      return

   end subroutine test_roche_surface

end program utest_surface
