! Submodule : framebuffer_construct_sm
! Purpose   : Constructor routines for framebuffer_t

#:include 'forum.inc'

submodule (framebuffer_m) framebuffer_construct_sm

   ! No implicit typing

   implicit none (type, external)

   ! Procedures

contains

   module procedure framebuffer_t_data_

      @:CHECK_BOUNDS(SIZE(PL, 1), 3)
      @:CHECK_BOUNDS(SIZE(PL, 2), SIZE(PZ, 1))
      @:CHECK_BOUNDS(SIZE(PL, 3), SIZE(PZ, 2))

      @:CHECK_BOUNDS(SIZE(PV, 1), 3)
      @:CHECK_BOUNDS(SIZE(PV, 2), SIZE(PZ, 1))
      @:CHECK_BOUNDS(SIZE(PV, 3), SIZE(PZ, 2))

      ! Construct the framebuffer_t from the data

      fbuff%PZ = PZ
      fbuff%PL = PL
      fbuff%PV = PV

      fbuff%n_x = SIZE(PZ, 1)
      fbuff%n_y = SIZE(PZ, 2)

      ! Finish

      return

   end procedure framebuffer_t_data_

   !****

   module procedure framebuffer_t_dims_

      real(RD) :: PZ(n_x,n_y)
      real(RD) :: PL(3,n_x,n_y)
      integer  :: PV(3,n_x,n_y)

      ! Construct the framebuffer_t from the dimensions

      PZ = -HUGE(0._RD)
      PL = 0._RD
      PV = 0

      fbuff = framebuffer_t_data_(PZ, PL, PV)

      ! Finish

      return

   end procedure framebuffer_t_dims_

   !****

   module procedure framebuffer_t_merge_

      integer              :: n_x
      integer              :: n_y
      integer              :: i
      logical, allocatable :: mask(:,:)

      ! Construct the framebuffer_t by merging fbuffs

      n_x = MINVAL(fbuffs%n_x)
      n_y = MINVAL(fbuffs%n_y)

      @:ASSERT_DEBUG(ALL(fbuffs%n_x == n_x), 'mismatched dimensions')
      @:ASSERT_DEBUG(ALL(fbuffs%n_y == n_y), 'mismatched dimensions')

      fbuff = framebuffer_t(n_x, n_y)

      allocate(mask(n_x, n_y))

      fbuff_loop: do i = 1, SIZE(fbuffs)

         mask = fbuffs(i)%PZ > fbuff%PZ

         fbuff%PZ = MERGE(fbuffs(i)%PZ, fbuff%PZ, mask)
         fbuff%PL = MERGE(fbuffs(i)%PL, fbuff%PL, SPREAD(mask, DIM=1, NCOPIES=3))
         fbuff%PV = MERGE(fbuffs(i)%PV, fbuff%PV, SPREAD(mask, DIM=1, NCOPIES=3))

      end do fbuff_loop

      ! Finish

      return

   end procedure framebuffer_t_merge_

end submodule framebuffer_construct_sm
