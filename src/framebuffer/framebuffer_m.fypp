! Module  : framebuffer_m
! Purpose : Define framebuffer_t datatype, representing a framebuffer
!           for rasterizing mesh_t types

#:include 'forum.inc'

module framebuffer_m

   ! Uses

   use forum_m

   use mesh_m
   use stat_m
   use view_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Derived-type definitions

   type :: framebuffer_t
      private
      real(RD), allocatable :: PZ(:,:)   ! Pixel depth buffer
      real(RD), allocatable :: PL(:,:,:) ! Pixel normalized barycentric coordinates buffer
      integer, allocatable  :: PV(:,:,:) ! Pixel vertex buffer
      integer, public       :: n_x
      integer, public       :: n_y
   contains
      private
      procedure, public :: pixel_depth
      procedure, public :: pixel_lambda
      procedure, public :: pixel_vert
      procedure, public :: render
      procedure, public :: render_triangle
      procedure, public :: read
      procedure, public :: write
   end type framebuffer_t

   ! Interfaces

   interface framebuffer_t
      module procedure framebuffer_t_dims_
      module procedure framebuffer_t_merge_
   end interface framebuffer_t

   interface compare
      module procedure compare_
   end interface compare

   interface

      ! In framebuffer_construct_sm

      module function framebuffer_t_data_(PZ, PL, PV) result(fbuff)
         implicit none (type, external)
         real(RD), intent(in) :: PZ(:,:)
         real(RD), intent(in) :: PL(:,:,:)
         integer, intent(in)  :: PV(:,:,:)
         type(framebuffer_t)  :: fbuff
      end function framebuffer_t_data_

      module function framebuffer_t_dims_(n_x, n_y) result(fbuff)
         implicit none (type, external)
         integer, intent(in) :: n_x
         integer, intent(in) :: n_y
         type(framebuffer_t) :: fbuff
      end function framebuffer_t_dims_

      module function framebuffer_t_merge_(fbuffs) result(fbuff)
         implicit none (type, external)
         type(framebuffer_t), intent(in) :: fbuffs(:)
         type(framebuffer_t)             :: fbuff
      end function framebuffer_t_merge_

      ! In framebuffer_pixel_sm

      module function pixel_depth(self, i_x, i_y) result(z)
         implicit none (type, external)
         class(framebuffer_t), intent(in), target :: self
         integer, intent(in)                      :: i_x
         integer, intent(in)                      :: i_y
         real(RD), pointer                        :: z
      end function pixel_depth

      module function pixel_lambda(self, i_x, i_y) result(lambda)
         implicit none (type, external)
         class(framebuffer_t), intent(in), target :: self
         integer, intent(in)                      :: i_x
         integer, intent(in)                      :: i_y
         real(RD), pointer                        :: lambda(:)
      end function pixel_lambda

      module function pixel_vert(self, i_x, i_y) result(v)
         implicit none (type, external)
         class(framebuffer_t), intent(in), target :: self
         integer, intent(in)                      :: i_x
         integer, intent(in)                      :: i_y
         integer, pointer                         :: v(:)
      end function pixel_vert

      ! In framebuffer_render_sm

      module subroutine render(self, mesh, view)
         implicit none (type, external)
         class(framebuffer_t), intent(inout) :: self
         type(mesh_t), intent(in)            :: mesh
         type(view_t), intent(in)            :: view
      end subroutine render

      module subroutine render_triangle(self, P, v)
         implicit none (type, external)
         class(framebuffer_t), intent(inout) :: self
         real(RD), intent(in)                :: P(:,:)
         integer, intent(in), optional       :: v(:)
      end subroutine render_triangle

      ! In framebuffer_io_sm

      module subroutine read(self, hdf5io, stat)
         implicit none (type, external)
         class(framebuffer_t), intent(out) :: self
         type(hdf5io_t), intent(inout)     :: hdf5io
         integer, intent(out), optional    :: stat
      end subroutine read

      module subroutine write(self, hdf5io, stat)
         implicit none (type, external)
         class(framebuffer_t), intent(in) :: self
         type(hdf5io_t), intent(inout)    :: hdf5io
         integer, intent(out), optional   :: stat
      end subroutine write

   end interface

   ! Accessibility

   private

   public :: framebuffer_t
   public :: compare

   ! Procedures

contains

   function compare_(fbuff_a, fbuff_b) result(same)

      type(framebuffer_t), intent(in) :: fbuff_a
      type(framebuffer_t), intent(in) :: fbuff_b
      logical                         :: same

      ! Compare the two meshes

      same = &
         fbuff_a%n_x == fbuff_b%n_x .AND. &
         fbuff_a%n_y == fbuff_b%n_y

      if (.NOT. same) return

      same = &
         ALL(fbuff_a%PZ == fbuff_b%PZ) .AND. &
         ALL(fbuff_a%PL == fbuff_b%PL) .AND. &
         ALL(fbuff_a%PV == fbuff_b%PV)

      ! Finish

      return

   end function compare_

end module framebuffer_m
