! Module  : framebuffer_m
! Purpose : Define framebuffer_t datatype, representing a framebuffer
!           for rasterizing mesh_t types

#:include 'forum.inc'

module framebuffer_m

   ! Uses

   use forum_m

   use mesh_m
   use stat_m
   use view_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Parameters

   integer, parameter :: NULL_FACE = -HUGE(0)

   ! Derived-type definitions

   type :: framebuffer_t
      private
      real(RD), allocatable :: PD(:,:)   ! Pixel depth buffer
      real(RD), allocatable :: PL(:,:,:) ! Pixel barycentric coordinates buffer
      integer, allocatable  :: PF(:,:)   ! Pixel face buffer
      type(view_t)          :: view
      integer, public       :: n_x
      integer, public       :: n_y
   contains
      private
      procedure, public :: render
      procedure         :: render_triangle_
      procedure, public :: read
      procedure, public :: write
   end type framebuffer_t

   ! Interfaces

   interface framebuffer_t
      module procedure framebuffer_t_dims_
   end interface framebuffer_t

   interface

      ! In framebuffer_construct_sm

      module function framebuffer_t_data_(PD, PL, PF, view) result(fbuff)
         real(RD), intent(in)     :: PD(:,:)
         real(RD), intent(in)     :: PL(:,:,:)
         integer, intent(in)      :: PF(:,:)
         type(view_t), intent(in) :: view
         type(framebuffer_t)      :: fbuff
      end function framebuffer_t_data_

      module function framebuffer_t_dims_(n_x, n_y, view) result(fbuff)
         integer, intent(in)      :: n_x
         integer, intent(in)      :: n_y
         type(view_t), intent(in) :: view
         type(framebuffer_t)      :: fbuff
      end function framebuffer_t_dims_

      ! In framebuffer_render_sm

      module subroutine render(self, mesh)
         class(framebuffer_t), intent(inout) :: self
         type(mesh_t), intent(in)            :: mesh
      end subroutine render

      module subroutine render_triangle_(self, P, f)
         class(framebuffer_t), intent(inout) :: self
         real(RD), intent(in)                :: P(:,:)
         integer, intent(in)                 :: f
      end subroutine render_triangle_

      ! In framebuffer_io_sm

      module subroutine read(self, hdf5io, stat)
         class(framebuffer_t), intent(out) :: self
         type(hdf5io_t), intent(inout)     :: hdf5io
         integer, intent(out), optional    :: stat
      end subroutine read

      module subroutine write(self, hdf5io, stat)
         class(framebuffer_t), intent(in) :: self
         type(hdf5io_t), intent(inout)    :: hdf5io
         integer, intent(out), optional   :: stat
      end subroutine write

   end interface

   ! Accessibility

   private

   public :: NULL_FACE
   public :: framebuffer_t

   ! Procedures

contains

end module framebuffer_m
