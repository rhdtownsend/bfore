! Module  : framebuffer_m
! Purpose : Define framebuffer_t datatype, representing a framebuffer
!           for rasterizing mesh_t types

#:include 'forum.inc'

module framebuffer_m

   ! Uses

   use forum_m

   use mesh_m
   use view_m
   use point_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Derived-type definitions

   type :: framebuffer_t
      private
      real(RD), allocatable :: PZ(:,:)   ! Pixel depth buffer
      integer, public       :: n_x
      integer, public       :: n_y
   contains
      private
      procedure, public :: pixel_depth
      procedure, public :: render
      procedure, public :: render_triangle
      procedure, public :: read
      procedure, public :: write
   end type framebuffer_t

   ! Interfaces

   interface framebuffer_t
      module procedure framebuffer_t_dims_
      module procedure framebuffer_t_merge_
   end interface framebuffer_t

   interface compare
      module procedure compare_
   end interface compare

   interface

      ! In framebuffer_construct_sm

      module function framebuffer_t_data_(PZ) result(fbuff)
         implicit none (type, external)
         real(RD), intent(in) :: PZ(:,:)
         type(framebuffer_t)  :: fbuff
      end function framebuffer_t_data_

      module function framebuffer_t_dims_(n_x, n_y) result(fbuff)
         implicit none (type, external)
         integer, intent(in) :: n_x
         integer, intent(in) :: n_y
         type(framebuffer_t) :: fbuff
      end function framebuffer_t_dims_

      module function framebuffer_t_merge_(fbuffs) result(fbuff)
         implicit none (type, external)
         type(framebuffer_t), intent(in) :: fbuffs(:)
         type(framebuffer_t)             :: fbuff
      end function framebuffer_t_merge_

      ! In framebuffer_pixel_sm

      module function pixel_depth(self, i_x, i_y) result(z)
         implicit none (type, external)
         class(framebuffer_t), intent(in), target :: self
         integer, intent(in)                      :: i_x
         integer, intent(in)                      :: i_y
         real(RD), pointer                        :: z
      end function pixel_depth

      ! In framebuffer_render_sm

      module subroutine render(self, mesh, view, process_pixel)
         implicit none (type, external)
         class(framebuffer_t), intent(inout) :: self
         type(mesh_t), intent(in)            :: mesh
         type(view_t), intent(in)            :: view
         optional                            :: process_pixel
         interface
            subroutine process_pixel(i_x, i_y, lambda, origin)
               use forum_m
               implicit none (type, external)
               integer, intent(in)  :: i_x
               integer, intent(in)  :: i_y
               real(RD), intent(in) :: lambda(3)
               integer, intent(in)  :: origin
            end subroutine process_pixel
         end interface
      end subroutine render

      module subroutine render_triangle(self, P, process_pixel, origin)
         implicit none (type, external)
         class(framebuffer_t), intent(inout) :: self
         type(point_t), intent(in)           :: P(:)
         optional                            :: process_pixel
         integer, intent(in), optional       :: origin
         interface
            subroutine process_pixel(i_x, i_y, lambda, origin)
               use forum_m
               implicit none (type, external)
               integer, intent(in)  :: i_x
               integer, intent(in)  :: i_y
               real(RD), intent(in) :: lambda(3)
               integer, intent(in)  :: origin
            end subroutine process_pixel
         end interface
      end subroutine render_triangle

      ! In framebuffer_io_sm

      module subroutine read(self, hdf5io, stat)
         implicit none (type, external)
         class(framebuffer_t), intent(out) :: self
         type(hdf5io_t), intent(inout)     :: hdf5io
         integer, intent(out), optional    :: stat
      end subroutine read

      module subroutine write(self, hdf5io, stat)
         implicit none (type, external)
         class(framebuffer_t), intent(in) :: self
         type(hdf5io_t), intent(inout)    :: hdf5io
         integer, intent(out), optional   :: stat
      end subroutine write

   end interface

   ! Accessibility

   private

   public :: framebuffer_t
   public :: compare

   ! Procedures

contains

   function compare_(fbuff_a, fbuff_b) result(same)

      type(framebuffer_t), intent(in) :: fbuff_a
      type(framebuffer_t), intent(in) :: fbuff_b
      logical                         :: same

      ! Compare the two meshes

      same = &
         fbuff_a%n_x == fbuff_b%n_x .AND. &
         fbuff_a%n_y == fbuff_b%n_y

      if (.NOT. same) return

      same = ALL(fbuff_a%PZ == fbuff_b%PZ)

      ! Finish

      return

   end function compare_

end module framebuffer_m
