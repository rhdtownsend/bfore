! Module  : map_m
! Purpose : Define map_t datatype, representing maps of rasterized mesh
!           attributes

#:include 'forum.inc'

module map_m

   ! Uses

   use forum_m

   use mesh_m
   use view_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Derived-type definitions

   type :: map_t
      private
      real(RD), allocatable :: PS(:,:,:)   ! Pixel scalar attributes buffer
      real(RD), allocatable :: PV(:,:,:,:) ! Pixel vector attributes buffer
      integer, public       :: n_s
      integer, public       :: n_v
      integer, public       :: n_x
      integer, public       :: n_y
   contains
      private
      procedure, public :: pixel_scalar
      procedure, public :: pixel_vector
      procedure, public :: render
      procedure, public :: read
      procedure, public :: write
   end type map_t

   ! Interfaces

   interface map_t
      module procedure map_t_dims_
   end interface map_t

   interface

      ! In map_construct_sm

      module function map_t_data_(PS, PV) result(map)
         implicit none (type, external)
         real(RD), intent(in) :: PS(:,:,:)
         real(RD), intent(in) :: PV(:,:,:,:)
         type(map_t) :: map
      end function map_t_data_

      module function map_t_dims_(n_s, n_v, n_x, n_y) result(map)
         implicit none (type, external)
         integer, intent(in) :: n_s
         integer, intent(in) :: n_v
         integer, intent(in) :: n_x
         integer, intent(in) :: n_y
         type(map_t) :: map
      end function map_t_dims_

      ! In map_pixel_sm

      module function pixel_scalar(self, i_s, i_x, i_y) result(s)
         implicit none (type, external)
         class(map_t), intent(in), target :: self
         integer, intent(in)                      :: i_s
         integer, intent(in)                      :: i_x
         integer, intent(in)                      :: i_y
         real(RD), pointer                        :: s
      end function pixel_scalar

      module function pixel_vector(self, i_v, i_x, i_y) result(v)
         implicit none (type, external)
         class(map_t), intent(in), target :: self
         integer, intent(in)                      :: i_v
         integer, intent(in)                      :: i_x
         integer, intent(in)                      :: i_y
         real(RD), pointer                        :: v(:)
      end function pixel_vector

      ! In map_render_sm

      module subroutine render(self, mesh, vert_scalars, vert_vectors, view)
         implicit none (type, external)
         class(map_t), intent(inout) :: self
         type(mesh_t), intent(in)    :: mesh
         real(RD), intent(in)        :: vert_scalars(:,:)
         real(RD), intent(in)        :: vert_vectors(:,:,:)
         type(view_t), intent(in)    :: view
      end subroutine render

      ! In map_io_sm

      module subroutine read(self, hdf5io, stat)
         implicit none (type, external)
         class(map_t), intent(out)      :: self
         type(hdf5io_t), intent(inout)  :: hdf5io
         integer, intent(out), optional :: stat
      end subroutine read

      module subroutine write(self, hdf5io, stat)
         implicit none (type, external)
         class(map_t), intent(in) :: self
         type(hdf5io_t), intent(inout)    :: hdf5io
         integer, intent(out), optional   :: stat
      end subroutine write

   end interface

   ! Accessibility

   private

   public :: map_t

   ! Procedures

contains

end module map_m
