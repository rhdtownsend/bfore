! Module  : view_m
! Purpose : Define view_t datatype, for defining viewing parameters

#:include 'forum.inc'

module view_m

   ! Uses

   use forum_m

   use point_m
   use transform_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Derived-type definitions

   type :: view_t
      type(point_t) :: origin
      real(RD)      :: alpha
      real(RD)      :: beta
      real(RD)      :: gamma
      real(RD)      :: delta_x
      real(RD)      :: delta_y
   contains
      private
      procedure, public :: camera_transform
      procedure, public :: normal_transform
      procedure, public :: pixel_transform
   end type view_t

   ! Accessibility

   private

   public :: view_t

   ! Procedures

contains

   function camera_transform(self) result(tform)

      class(view_t), intent(in) :: self
      type(transform_t)         :: tform

      ! Construct a transform_t for mapping from world coordinates to
      ! camera coordinates

      tform = transform_t()

      call tform%translate(-self%origin%x, -self%origin%y, -self%origin%z)
      call tform%rotate(self%alpha, self%beta, self%gamma)

      ! Finish

      return

   end function camera_transform

   !****

   function normal_transform(self) result(tform)

      class(view_t), intent(in) :: self
      type(transform_t)         :: tform

      ! Construct a transform_t for mapping from world coordinates to
      ! normalized coordinates

      tform = self%camera_transform()

      call tform%translate(0.5_RD*self%delta_x, 0.5*self%delta_y, 0._RD)
      call tform%scale(1._RD/self%delta_x, 1._RD/self%delta_y, 1._RD)

      ! Finish

      return

   end function normal_transform

   !****

   function pixel_transform(self, n_x, n_y) result(tform)

      class(view_t), intent(in) :: self
      integer, intent(in)       :: n_x
      integer, intent(in)       :: n_y
      type(transform_t)         :: tform

      ! Construct a transform_t for mapping from world coordinates to
      ! pixel coordinates

      tform = self%normal_transform()

      call tform%scale(REAL(n_x, RD), REAL(n_y, RD), 1._RD)
      call tform%translate(0.5_RD, 0.5_RD, 0._RD)

      ! Finish

      return

   end function pixel_transform

end module view_m
