! Module  : view_m
! Purpose : Define view_t datatype, for defining viewing parameters

#:include 'forum.inc'

module view_m

   ! Uses

   use forum_m

   use transform_m
   use stat_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Derived-type definitions

   type :: view_t
      private
      real(RD) :: alpha
      real(RD) :: beta
      real(RD) :: gamma
      real(RD) :: C(3)
      real(RD) :: delta_x
      real(RD) :: delta_y
   contains
      private
      procedure, public :: read
      procedure, public :: write
      procedure, public :: camera_transform
      procedure, public :: normal_transform
      procedure, public :: framebuffer_transform
   end type view_t

   ! Interfaces

   interface view_t
      module procedure view_t_data_
   end interface view_t

   interface

      ! In view_construct_sm

      module function view_t_data_(alpha, beta, gamma, C, delta_x, delta_y) result(view)
         real(RD), intent(in) :: alpha
         real(RD) ,intent(in) :: beta
         real(RD), intent(in) :: gamma
         real(RD), intent(in) :: C(:)
         real(RD), intent(in) :: delta_x
         real(RD), intent(in) :: delta_y
         type(view_t)         :: view
      end function view_t_data_

      ! In view_io_sm

      module subroutine read(self, hdf5io, stat)
         class(view_t), intent(out)     :: self
         type(hdf5io_t), intent(inout)  :: hdf5io
         integer, intent(out), optional :: stat
      end subroutine read

      module subroutine write(self, hdf5io, stat)
         class(view_t), intent(in)      :: self
         type(hdf5io_t), intent(inout)  :: hdf5io
         integer, intent(out), optional :: stat
      end subroutine write

   end interface

   ! Accessibility

   private

   public :: view_t

   ! Procedures

contains

   function camera_transform(self) result(tform)

      class(view_t), intent(in) :: self
      type(transform_t)         :: tform

      ! Construct a transform_t for mapping from world coordinates to
      ! camera coordinates

      tform = transform_t()

      call tform%translate(-self%C(1), -self%C(2), -self%C(3))
      call tform%rotate(self%alpha, self%beta, self%gamma)

      ! Finish

      return

   end function camera_transform

   !****

   function normal_transform(self) result(tform)

      class(view_t), intent(in) :: self
      type(transform_t)         :: tform

      ! Construct a transform_t for mapping from world coordinates to
      ! normalized coordinates

      tform = self%camera_transform()

      call tform%translate(0.5_RD*self%delta_x, 0.5*self%delta_y, 0._RD)
      call tform%scale(1._RD/self%delta_x, 1._RD/self%delta_y, 1._RD)

      ! Finish

      return

   end function normal_transform

   !****

   function framebuffer_transform(self, n_x, n_y) result(tform)

      class(view_t), intent(in) :: self
      integer, intent(in)       :: n_x
      integer, intent(in)       :: n_y
      type(transform_t)         :: tform

      ! Construct a transform_t for mapping from world coordinates to
      ! frambuffer coordinates

      tform = self%normal_transform()

      call tform%scale(REAL(n_x, RD), REAL(n_y, RD), 1._RD)
      call tform%translate(0.5_RD, 0.5_RD, 0._RD)

      ! Finish

      return

   end function framebuffer_transform

end module view_m

   
      

      
      

