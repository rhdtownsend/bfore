! Program : build_star
! Purpose : Build a star

#:include 'forum.inc'

program build_star

   ! Uses

   use forum_m

   use mesh_m
   use star_m
   use stat_m

   use tomlf

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Variables

   character(:), allocatable :: file_name

   real(RD)                  :: omega
   real(RD)                  :: beta
   character(:), allocatable :: star_file_name
   integer                   :: n_refine

   type(toml_table), allocatable  :: table
   type(toml_context)             :: context
   type(toml_error), allocatable  :: error

   type(star_t)   :: star
   type(hdf5io_t) :: hdf5io

   ! Read command-line arguments

   @:ASSERT(n_arg() == 1, 'Syntax: build_star <file_name>')

   call get_arg(1, file_name)

   ! Read the input file & initialize

   call toml_load(table, file_name, error=error)
   if (ALLOCATED(error)) then
      print *, error%message
      stop 1
   end if

   call init_star(table, omega, beta, star_file_name)
   call init_mesh(table, n_refine)

   call table%destroy()

   ! Create the star

   star = star_t(omega, beta, n_refine)

   ! Write the star

   hdf5io = hdf5io_t(star_file_name, CREATE_FILE)
   call star%write(hdf5io)
   call hdf5io%final()

   ! Finish

contains

   subroutine init_star(table, omega, beta, star_file_name)

      type(toml_table), intent(inout)        :: table
      real(RD), intent(out)                  :: omega
      real(RD), intent(out)                  :: beta
      character(:), allocatable, intent(out) :: star_file_name

      type(toml_table), pointer :: table_star
      integer                   :: stat
      integer                   :: origin

      ! Read the star parameters table

      call get_value(table, 'star', table_star, stat=stat, origin=origin)
      call check_toml_stat(context, stat, 'star', origin, 'table')

      call get_value(table_star, 'omega', omega, stat=stat, origin=origin)
      call check_toml_stat(context, stat, 'omega', origin, 'real')

      call get_value(table_star, 'beta', beta, 0.25_RD, stat=stat, origin=origin)
      call check_toml_stat(context, stat, 'beta', origin, 'real')

      call get_value(table_star, 'file_name', star_file_name, stat=stat, origin=origin)
      call check_toml_stat(context, stat, 'file_name', origin, 'integer')

      ! Finish

      return

   end subroutine init_star

   !****

   subroutine init_mesh(table, n_refine)

      type(toml_table), intent(inout) :: table
      integer, intent(out)            :: n_refine

      type(toml_table), pointer :: table_mesh
      integer                   :: stat
      integer                   :: origin
      integer                   :: n_faces

      ! Read the mesh parameters table

      call get_value(table, 'mesh', table_mesh, stat=stat, origin=origin)
      call check_toml_stat(context, stat, 'mesh', origin, 'table')

      call get_value(table_mesh, 'n_faces', n_faces, stat=stat, origin=origin)
      call check_toml_stat(context, stat, 'n_faces', origin, 'integer')

      ! Calculate the refinement level

      n_refine = MAX(CEILING(LOG(n_faces/20._RD)/LOG(3._RD)), 0)

      ! Finish

      return

   end subroutine init_mesh

end program build_star
