! Program : render_mesh
! Purpose : Render a mesh

#:include 'forum.inc'

program render_mesh

   ! Uses

   use forum_m

   use mesh_m
   use renderbuff_m
   use stat_m
   use stream_m
   use view_m

   use tomlf

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Variables

   character(:), allocatable :: file_name

   type(toml_table), allocatable  :: table
   type(toml_context)             :: context
   type(toml_error), allocatable  :: error
   type(mesh_t)                   :: mesh
   type(view_t)                   :: view
   integer                        :: n_x
   integer                        :: n_y
   character(:), allocatable      :: rbuff_file_name
   character(:), allocatable      :: stream_file_name
   type(renderbuff_t)             :: rbuff
   type(stream_t)                 :: stream
   type(hdf5io_t)                 :: hdf5io

   ! Read command-line arguments

   @:ASSERT(n_arg() == 1, 'Syntax: render_mesh <file_name>')

   call get_arg(1, file_name)

   ! Read the input file & initialize

   call toml_load(table, file_name, error=error, context=context)
   if (ALLOCATED(error)) then
      print *,error%message
      stop 1
   end if

   call init_mesh(table, mesh)
   call init_view(table, view)
   call init_renderbuff(table, n_x, n_y, rbuff_file_name)
   call init_stream(table, stream_file_name)

   call table%destroy()

   ! Render the mesh

   rbuff = renderbuff_t(n_x, n_y, mesh%n_scalar, mesh%n_vector)

   call rbuff%render(mesh, view, 1)

   ! Stream the renderbuff

   stream = stream_t(rbuff, 1)

   ! Write the renderbuff

   if (rbuff_file_name /= '') then

      hdf5io = hdf5io_t(rbuff_file_name, CREATE_FILE)
      call rbuff%write(hdf5io)
      call hdf5io%final()

   end if

   ! Write the stream

   if (stream_file_name /= '') then

      hdf5io = hdf5io_t(stream_file_name, CREATE_FILE)
      call stream%write(hdf5io)
      call hdf5io%final()

   end if

   ! Finish

contains

   subroutine init_mesh(table, mesh)

      type(toml_table), intent(inout) :: table
      type(mesh_t), intent(out)       :: mesh

      type(toml_table), pointer :: table_mesh
      integer                   :: stat
      integer                   :: origin
      character(:), allocatable :: mesh_file_name
      type(hdf5io_t)            :: hdf5io

      ! Read the mesh table

      call get_value(table, 'mesh', table_mesh, stat=stat, origin=origin)
      call check_toml_stat(context, stat, 'mesh', origin, 'table')

      call get_value(table_mesh, 'file_name', mesh_file_name, stat=stat, origin=origin)
      call check_toml_stat(context, stat, 'file_name', origin, 'string')

      ! Read the mesh

      hdf5io = hdf5io_t(mesh_file_name, OPEN_FILE_RO)
      call mesh%read(hdf5io)
      call hdf5io%final()

      ! Finish

      return

   end subroutine init_mesh

   !****

   subroutine init_view(table, view)

      use point_m

      type(toml_table), intent(inout) :: table
      type(view_t), intent(out)       :: view

      type(toml_table), pointer :: table_view
      integer                   :: stat
      integer                   :: origin
      real(RD)                  :: alpha
      real(RD)                  :: beta
      real(RD)                  :: gamma
      real(RD)                  :: delta_x
      real(RD)                  :: delta_y

      ! Read the view table

      call get_value(table, 'view', table_view, stat=stat, origin=origin)
      call check_toml_stat(context, stat, 'view', origin, 'table')

      call get_value(table_view, 'alpha', alpha, 0._RD, stat=stat, origin=origin)
      call check_toml_stat(context, stat, 'alpha', origin, 'real')

      call get_value(table_view, 'beta', beta, 0._RD, stat=stat, origin=origin)
      call check_toml_stat(context, stat, 'beta', origin, 'real')

      call get_value(table_view, 'gamma', gamma, 0._RD, stat=stat, origin=origin)
      call check_toml_stat(context, stat, 'gamma', origin, 'real')

      call get_value(table_view, 'delta_x', delta_x, 2._RD, stat=stat, origin=origin)
      call check_toml_stat(context, stat, 'delta_x', origin, 'real')

      call get_value(table_view, 'delta_y', delta_y, 2._RD, stat=stat, origin=origin)
      call check_toml_stat(context, stat, 'delta_y', origin, 'real')

      ! Construct the view

      view = view_t(point_t(0._RD, 0._RD, 0._RD), &
         alpha*DEG_TO_RAD, beta*DEG_TO_RAD, gamma*DEG_TO_RAD, &
         delta_x, delta_y)

      ! Finish

      return

   end subroutine init_view

   !****

   subroutine init_renderbuff(table, n_x, n_y, rbuff_file_name)

      type(toml_table), intent(inout)        :: table
      integer, intent(out)                   :: n_x
      integer, intent(out)                   :: n_y
      character(:), allocatable, intent(out) :: rbuff_file_name

      type(toml_table), pointer :: table_rbuff
      integer                   :: stat
      integer                   :: origin

      ! Read the renderbuff table

      call get_value(table, 'renderbuff', table_rbuff, stat=stat, origin=origin)
      call check_toml_stat(context, stat, 'renderbuff', origin, 'table')

      call get_value(table_rbuff, 'n_x', n_x, stat=stat, origin=origin)
      call check_toml_stat(context, stat, 'n_x', origin, 'integer')

      call get_value(table_rbuff, 'n_y', n_y, stat=stat, origin=origin)
      call check_toml_stat(context, stat, 'n_y', origin, 'integer')

      call get_value(table_rbuff, 'file_name', rbuff_file_name, '',  stat=stat, origin=origin)
      call check_toml_stat(context, stat, 'file_name', origin, 'string')

      ! Finish

      return

   end subroutine init_renderbuff

   !****

   subroutine init_stream(table, stream_file_name)

      type(toml_table), intent(inout)        :: table
      character(:), allocatable, intent(out) :: stream_file_name

      type(toml_table), pointer :: table_stream
      integer                   :: stat
      integer                   :: origin

      ! Read the stream parameters table

      call get_value(table, 'stream', table_stream, stat=stat, origin=origin)
      call check_toml_stat(context, stat, 'stream', origin, 'table')

      call get_value(table_stream, 'file_name', stream_file_name, '', stat=stat, origin=origin)
      call check_toml_stat(context, stat, 'file_name', origin, 'string')

      ! Finish

      return

   end subroutine init_stream

end program render_mesh
