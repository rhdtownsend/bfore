! Program : pulse_star
! Purpose : Perturb a star with pulsation modes

#:include 'forum.inc'

program pulse_star

   ! Uses

   use forum_m

   use mesh_m
   use mode_m
   use star_m
   use stat_m

   use tomlf

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Variables

   character(:), allocatable :: file_name

   type(toml_table), allocatable  :: table
   type(toml_context)             :: context
   type(toml_error), allocatable  :: error
   type(mode_t), allocatable      :: modes(:)
   character(:), allocatable      :: input_file_name
   character(:), allocatable      :: output_file_prefix
   real(RD), allocatable          :: times(:)

   integer                    :: n_times
   integer                    :: n_modes
   character(:), allocatable  :: output_file_name
   type(hdf5io_t)             :: hdf5io
   type(star_t)               :: star
   type(star_t)               :: pert_star
   integer                    :: i

   ! Read command-line arguments

   @:ASSERT(n_arg() == 1, 'Syntax: pulse_star <file_name>')

   call get_arg(1, file_name)

   ! Read the input file & initialize

   call toml_load(table, file_name, error=error, context=context)
   if (ALLOCATED(error)) then
      print *,error%message
      stop 1
   end if

   call init_modes(table, modes)
   call init_times(table, times)
   call init_files(table, input_file_name, output_file_prefix)

   call table%destroy()

   n_times = SIZE(times)
   n_modes = SIZE(modes)

   allocate(character(LEN(output_file_prefix)+7)::output_file_name)

   ! Load the star

   hdf5io = hdf5io_t(input_file_name, OPEN_FILE_RO)
   call star%read(hdf5io)
   call hdf5io%final()

   ! Loop over times

   time_loop : do i = 1, n_times

      ! Clone the star

      pert_star = star

      ! Apply perturbations

      call pert_star%perturb(modes, times(i))

      ! Write out the mesh

      write(output_file_name, 100) output_file_prefix, i, '.h5'
100   format(A, I4.4, A)

      hdf5io = hdf5io_t(output_file_name, CREATE_FILE)
      call pert_star%write(hdf5io)
      call hdf5io%final()

   end do time_loop

   ! Finish

contains

   subroutine init_modes(table, modes)

      type(toml_table), intent(inout)        :: table
      type(mode_t), allocatable, intent(out) :: modes(:)

      type(toml_array), pointer :: array
      integer                   :: stat
      integer                   :: origin
      integer                   :: n
      integer                   :: i
      type(toml_table), pointer :: table_entry
      integer                   :: l
      integer                   :: m
      real(RD)                  :: A_r
      real(RD)                  :: A_h
      real(RD)                  :: A_T
      real(RD)                  :: A_g
      real(RD)                  :: psi_r
      real(RD)                  :: psi_h
      real(RD)                  :: psi_T
      real(RD)                  :: psi_g
      real(RD)                  :: period

      ! Read the modes array of tables

      call get_value(table, 'modes', array, stat=stat, origin=origin)
      call check_toml_stat(context, stat, 'modes', origin, 'array of tables')

      n = len(array)

      ! Initialize the modes

      allocate(modes(n))

      do i = 1, n

         call get_value(array, i, table_entry, stat=stat, origin=origin)
         call check_toml_stat(context, stat, 'modes', origin, 'table')

         call get_value(table_entry, 'l', l, stat=stat, origin=origin)
         call check_toml_stat(context, stat, 'l', origin, 'integer')

         call get_value(table_entry, 'm', m, stat=stat, origin=origin)
         call check_toml_stat(context, stat, 'm', origin, 'integer')

         call get_value(table_entry, 'A_r', A_r, 0._RD, stat=stat, origin=origin)
         call check_toml_stat(context, stat, 'A_r', origin, 'real')

         call get_value(table_entry, 'psi_r', psi_r, 0._RD, stat=stat, origin=origin)
         call check_toml_stat(context, stat, 'psi_r', origin, 'real')

         call get_value(table_entry, 'A_h', A_h, 0._RD, stat=stat, origin=origin)
         call check_toml_stat(context, stat, 'A_h', origin, 'real')

         call get_value(table_entry, 'psi_h', psi_h, 0._RD, stat=stat, origin=origin)
         call check_toml_stat(context, stat, 'psi_h', origin, 'real')

         call get_value(table_entry, 'A_T', A_T, 0._RD, stat=stat, origin=origin)
         call check_toml_stat(context, stat, 'A_T', origin, 'real')

         call get_value(table_entry, 'psi_T', psi_T, 0._RD, stat=stat, origin=origin)
         call check_toml_stat(context, stat, 'psi_T', origin, 'real')

         call get_value(table_entry, 'A_g', A_g, 0._RD, stat=stat, origin=origin)
         call check_toml_stat(context, stat, 'A_g', origin, 'real')

         call get_value(table_entry, 'psi_g', psi_g, 0._RD, stat=stat, origin=origin)
         call check_toml_stat(context, stat, 'psi_g', origin, 'real')

         call get_value(table_entry, 'period', period, stat=stat, origin=origin)
         call check_toml_stat(context, stat, 'period', origin, 'real')

         modes(i) = mode_t(l, m, &
            A_r*EXP(CMPLX(0._RD, 1._RD, RD)*psi_r*DEG_TO_RAD), &
            A_h*EXP(CMPLX(0._RD, 1._RD, RD)*psi_h*DEG_TO_RAD), &
            A_T*EXP(CMPLX(0._RD, 1._RD, RD)*psi_T*DEG_TO_RAD), &
            A_g*EXP(CMPLX(0._RD, 1._RD, RD)*psi_g*DEG_TO_RAD), &
            2._RD*PI/period)

      end do

   end subroutine init_modes

   !****

   subroutine init_times(table, times)

      type(toml_table), intent(inout)    :: table
      real(RD), allocatable, intent(out) :: times(:)

      type(toml_table), pointer :: table_time
      integer                   :: stat
      integer                   :: origin
      real(RD)                  :: start
      real(RD)                  :: end
      integer                   :: n
      integer                   :: i

      ! Read the times table

      call get_value(table, 'times', table_time, stat=stat, origin=origin)
      call check_toml_stat(context, stat, 'times', origin, 'table')
      
      call get_value(table_time, 'start', start, stat=stat, origin=origin)
      call check_toml_stat(context, stat, 'start', origin, 'real')

      call get_value(table_time, 'end', end, stat=stat, origin=origin)
      call check_toml_stat(context, stat, 'end', origin, 'real')

      call get_value(table_time, 'n', n, stat=stat, origin=origin)
      call check_toml_stat(context, stat, 'n', origin, 'integer')

      ! Set up the times array

      times = [((start*(n-i) + end*(i-1))/(n-1), i=1,n)]

      ! Finish

   end subroutine init_times

   !****

   subroutine init_files(table, input_file_name, output_file_prefix)

      type(toml_table), intent(inout)        :: table
      character(:), allocatable, intent(out) :: input_file_name
      character(:), allocatable, intent(out) :: output_file_prefix

      type(toml_table), pointer :: table_files
      integer                   :: stat
      integer                   :: origin

      ! Read the files parameters table

      call get_value(table, 'files', table_files, stat=stat, origin=origin)
      call check_toml_stat(context, stat, 'files', origin, 'table')

      call get_value(table_files, 'input_file_name', input_file_name, stat=stat, origin=origin)
      call check_toml_stat(context, stat, 'input_file_name', origin, 'string')

      call get_value(table_files, 'output_file_prefix', output_file_prefix, stat=stat, origin=origin)
      call check_toml_stat(context, stat, 'output_file_prefix', origin, 'string')

      ! Finish

      return

   end subroutine init_files

end program pulse_star
