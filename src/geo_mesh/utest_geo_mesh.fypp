! Program : utest_geo_mesh
! Purpose : Unit tests for geo_mesh_m

#:include 'forum.inc'
#:include 'utest.inc'

program utest_geo_mesh

   ! Uses

   use forum_m

   use mesh_m
   use geo_mesh_m
   use geo_mesh_primitives_m
   use stat_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Run the tests

   call test_primitives()
   call test_modification()
   call test_topology()
   call test_geometry()
   call test_io()

   ! Finish

contains

   subroutine test_primitives()

      type(geo_mesh_t) :: geo_mesh
      integer          :: stat

      print *, 'Checking geo_mesh primitives'

      geo_mesh = tetrahedron_geo_mesh()
      call geo_mesh%validate(stat)
      @:CHECK(stat == STAT_OK, 'tetrahedron_geo_mesh -> valid')

      geo_mesh = icosahedron_geo_mesh()
      call geo_mesh%validate(stat)
      @:CHECK(stat == STAT_OK, 'icosahedron_geo_mesh -> valid')

      ! Finish

      return

   end subroutine test_primitives

   !****

   subroutine test_modification()
 
      type(geo_mesh_t) :: geo_mesh
      integer          :: stat

      print *, 'Checking geo_mesh modification'

      geo_mesh = geo_mesh_t([tetrahedron_geo_mesh(), tetrahedron_geo_mesh()])
      call geo_mesh%validate(stat)
      @:CHECK(stat == STAT_OK, 'append_geo_mesh on two tetrahedrahedron_geo_mesh -> valid')

      ! Finish

      return

   end subroutine test_modification

   !****

   subroutine test_topology()

      type(geo_mesh_t) :: geo_mesh

      print *, 'Checking mesh topology'

      geo_mesh = tetrahedron_geo_mesh()
      @:CHECK(geo_mesh%euler_characteristic() == 2, 'Euler formula for tetrahedron_geo_mesh')

      geo_mesh = geo_mesh_t([tetrahedron_geo_mesh(), tetrahedron_geo_mesh()])
      @:CHECK(geo_mesh%euler_characteristic() == 4, 'Euler formula for two tetrahedra_geo_mesh')

      ! Finish

      return

   end subroutine test_topology

   !****

   subroutine test_geometry()

      real(RD), parameter :: TOL = 1E-15_RD

      type(geo_mesh_t) :: geo_mesh
      real(RD)         :: length(12)
      integer          :: e
      integer          :: v1
      integer          :: v2
      integer          :: f
      real(RD)         :: area(4)

      print *, 'Checking mesh geometry'

      geo_mesh = tetrahedron_geo_mesh()
      @:CHECK(ALL(ABS(geo_mesh%vert_coord(4) - [0._RD, 0._RD, 1._RD]) < TOL), &
         'Get vertex coord of tetrahedron_geo_mesh')

      geo_mesh = tetrahedron_geo_mesh()
      geo_mesh%vert_coord(4) = [0._RD, 0._RD, 2._RD]
      @:CHECK(ALL(geo_mesh%vert_coord(4) == [0._RD, 0._RD, 2._RD]), &
         'Set vertex coord of tetrahedron_geo_mesh')
      
      geo_mesh = tetrahedron_geo_mesh()
      edge_loop: do e = 1, 12
         v1 = geo_mesh%edge_vert(e)
         v2 = geo_mesh%edge_vert(geo_mesh%edge_next(e))
         length(e) = NORM2(geo_mesh%vert_coord(v2) - geo_mesh%vert_coord(v1))
      end do edge_loop
      @:CHECK(ALL(ABS(length - 2._RD*SQRT(6._RD)/3._RD) < TOL), &
         'Edge lengths of tetrahedron_geo_mesh')

      geo_mesh = tetrahedron_geo_mesh()
      face_loop: do f = 1, 4
         area(f) = geo_mesh%face_area(f)
      end do face_loop
      @:CHECK(ALL(ABS(area - 2._RD/SQRT(3._RD)) < TOL), &
         'Face areas of tetrahedron_geo_mesh')

      ! Finish

      return

   end subroutine test_geometry

   !****

   subroutine test_io()

      type(geo_mesh_t) :: write_mesh
      type(geo_mesh_t) :: read_mesh
      type(hdf5io_t)   :: hdf5io
      integer          :: stat

      print *, 'Checking mesh i/o'

      write_mesh = icosahedron_geo_mesh()

      hdf5io = hdf5io_t('geo_mesh_tmp.h5', CREATE_FILE)
      call write_mesh%write(hdf5io, stat)
      call hdf5io%final()
      @:CHECK(stat == STAT_OK, 'write icosahedron_geo_mesh to file')

      hdf5io = hdf5io_t('geo_mesh_tmp.h5', OPEN_FILE_RO)
      call read_mesh%read(hdf5io, stat)
      call hdf5io%final()
      @:CHECK(stat == STAT_OK, 'read icosahedron_geo_mesh from file')

      @:CHECK(compare(write_mesh, read_mesh), 'read mesh equals written mesh')

      ! Finish

      return

   end subroutine test_io

end program utest_geo_mesh
