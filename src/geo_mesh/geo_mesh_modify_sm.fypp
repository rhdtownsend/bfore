! Submodule : geo_mesh_modify_sm
! Purpose   : Routines to modify geo_mesh_t types

#:include 'forum.inc'

submodule (geo_mesh_m) geo_mesh_modify_sm

   ! Uses

   use forum_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Procedures

contains

   module procedure refine_face

      integer :: e1
      integer :: e2
      integer :: e3
      integer :: v1
      integer :: v2
      integer :: v3

      ! Refine the face by inserting a new vertex at the center. The
      ! faces are oriented so that their first edges are adjacent to
      ! the (old) neighboring faces. The new vertex is returned in v

      call expand_(self, self%n_vert+1)

      call self%mesh_t%refine_face(f, v)
   
      ! Identify adjacent edges

      e1 = self%vert_edge(v)
      e2 = self%edge_twin(self%edge_prev(e1))
      e3 = self%edge_next(self%edge_twin(e1))

      ! Identify adjacent vertices

      v1 = self%edge_vert(self%edge_next(e1))
      v2 = self%edge_vert(self%edge_next(e2))
      v3 = self%edge_vert(self%edge_next(e3))

      ! Update the vertex-coordinate table

      self%VC(:,v) = (self%VC(:,v1) + self%VC(:,v2) + self%VC(:,v3))/3._RD

      ! Finish

      return

   end procedure refine_face

   !****

   module procedure refine

      ! Refine all faces. The new vertices are returned in v

      call expand_(self, self%n_vert+self%n_face)

      call self%mesh_t%refine(v)

      ! Finish

      return

   end procedure refine

   !****

   subroutine expand_(geo_mesh, d_vert)

      class(geo_mesh_t), intent(inout) :: geo_mesh
      integer, intent(in)              :: d_vert

      ! If necessary, expand arrays

      if (d_vert > geo_mesh%n_vert) then

         call reallocate(geo_mesh%VC, [d_vert])
         geo_mesh%VC(:,geo_mesh%n_vert+1:) = 0._RD

      end if

      ! Finish

      return

   end subroutine expand_
   
end submodule geo_mesh_modify_sm
