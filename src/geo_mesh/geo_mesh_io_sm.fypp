! Submodule : geo_mesh_io_sm
! Purpose   : Input/output for geo_mesh_t types

#:include 'forum.inc'

submodule (geo_mesh_m) geo_mesh_io_sm

   ! Uses

   use forum_m

   use file_m
   use geo_mesh_m
   use stat_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Procedures

contains

   module procedure read

      integer :: revision
   
      ! Read the geo_mesh_t

      call check_type(hdf5io, 'geo_mesh_t', stat)
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      end if

      call hdf5io%read_attr('REVISION', revision)

      select case(revision)
      case(1)
         call read_rev1_()
      case default
         if (PRESENT(stat)) then
            stat = STAT_INVALID_GROUP_REVISION
            return
         else
            @:ABORT('invalid group revision')
         end if
      end select

      ! Finish

      return

   contains

      subroutine read_rev1_()

         type(hdf5io_t)        :: hdf5io_mesh
         type(mesh_t)          :: mesh
         real(RD), allocatable :: VC(:,:)

         hdf5io_mesh = hdf5io_t(hdf5io, 'mesh')
         call mesh%read(hdf5io_mesh, stat)
         if (PRESENT(stat)) then
            if (stat /= STAT_OK) return
         end if
         call hdf5io_mesh%final()

         call hdf5io%alloc_read_dset('VC', VC)

         if (SIZE(VC, 1) /= 3 .OR. SIZE(VC, 2) /= mesh%n_vert) then
            if (PRESENT(stat)) then
               stat = STAT_INVALID_DATASET_DIM
               return
            else
               @:ABORT('invalid dataset dimension')
            end if
         end if

         select type(self)
         type is(geo_mesh_t)
            self = geo_mesh_t(mesh, VC)
         class default
            @:ABORT('invalid type')
         end select

         ! Finish

         return

      end subroutine read_rev1_

   end procedure read

   !****
   
   module procedure write

      type(hdf5io_t) :: hdf5io_mesh

      ! Write the mesh_t

      call hdf5io%write_attr('TYPE', 'geo_mesh_t')
      call hdf5io%write_attr('REVISION', 1)

      hdf5io_mesh = hdf5io_t(hdf5io, 'mesh')
      call self%mesh_t%write(hdf5io_mesh, stat)
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      end if
      call hdf5io_mesh%final()

      call hdf5io%write_dset('VC', self%VC)

      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   end procedure write

end submodule geo_mesh_io_sm
